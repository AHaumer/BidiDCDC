within BiChopper.Switching.DiodeMode;
block DiodeModeGen "Generates switching signals for the Diode Mode"
  parameter Modelica.Units.SI.Frequency fS=40e3 "Swicthing frequency";
  parameter Modelica.Units.SI.Time startTime=0 "Start Time";
  Modelica.Blocks.Sources.Trapezoid triangle(
    rising=0.5/fS,
    width=0,
    falling=0.5/fS,
    final period=1/fS,
    final amplitude=1,
    final nperiod=-1,
    final offset=0,
    final startTime=startTime)
    annotation (Placement(transformation(origin={-78,-22}, extent={{-10,-10},{10,10}})));
  Modelica.Blocks.Logical.Greater greater
    annotation (Placement(transformation(extent={{-50,-24},{-30,-4}})));
  Modelica.Blocks.Logical.LogicalSwitch logicalSwitch
    annotation (Placement(transformation(extent={{72,30},{92,50}})));
  Modelica.Blocks.Logical.LogicalSwitch logicalSwitch1
    annotation (Placement(transformation(extent={{72,-50},{92,-30}})));
  Modelica.Blocks.Logical.And and1
    annotation (Placement(transformation(extent={{24,10},{44,30}})));
  Modelica.Blocks.Interfaces.BooleanOutput fireLV
    annotation (Placement(transformation(extent={{100,50},{120,70}}),
        iconTransformation(extent={{100,50},{120,70}})));
  Modelica.Blocks.Interfaces.BooleanOutput fireHV
    annotation (Placement(transformation(extent={{100,-70},{120,-50}}),
        iconTransformation(extent={{100,-70},{120,-50}})));
  Modelica.Blocks.Interfaces.RealInput current annotation (Placement(
        transformation(
        extent={{-20,-20},{20,20}},
        rotation=270,
        origin={0,120})));
  Modelica.Blocks.Interfaces.RealInput dutyCycle
    annotation (Placement(transformation(extent={{-140,20},{-100,60}})));
  Modelica.Blocks.Interfaces.BooleanInput Direction "0=buck, 1=boost"
    annotation (Placement(transformation(extent={{-140,-60},{-100,-20}})));
  Modelica.Blocks.Logical.Not not1
    annotation (Placement(transformation(extent={{-14,2},{6,22}})));
  CurrentDirectionCorrection currentDirectionCorrection annotation (Placement(
        transformation(
        extent={{-10,-10},{10,10}},
        rotation=270,
        origin={0,70})));
equation
  connect(triangle.y,greater. u2) annotation (Line(points={{-67,-22},{-52,-22}},
                           color={0,0,127}));
  connect(Direction, logicalSwitch1.u2)
    annotation (Line(points={{-120,-40},{70,-40}}, color={255,0,255}));
  connect(logicalSwitch.y,fireLV)
    annotation (Line(points={{93,40},{96,40},{96,60},{110,60}},
                                                color={255,0,255}));
  connect(logicalSwitch1.y,fireHV)
    annotation (Line(points={{93,-40},{96,-40},{96,-60},{110,-60}},
                                                  color={255,0,255}));
  connect(logicalSwitch.u2,logicalSwitch1. u2) annotation (Line(points={{70,40},{60,
          40},{60,-40},{70,-40}},     color={255,0,255}));
  connect(greater.y,logicalSwitch. u1) annotation (Line(points={{-29,-14},{56,-14},
          {56,48},{70,48}}, color={255,0,255}));
  connect(logicalSwitch1.u1, and1.y) annotation (Line(points={{70,-32},{66,-32},{
          66,20},{45,20}},
                        color={255,0,255}));
  connect(logicalSwitch.u3, and1.y)
    annotation (Line(points={{70,32},{66,32},{66,20},{45,20}}, color={255,0,255}));
  connect(not1.y, and1.u2)
    annotation (Line(points={{7,12},{22,12}}, color={255,0,255}));
  connect(logicalSwitch1.u3, logicalSwitch.u1) annotation (Line(points={{70,-48},
          {56,-48},{56,48},{70,48}}, color={255,0,255}));
  connect(not1.u, logicalSwitch.u1) annotation (Line(points={{-16,12},{-20,12},{
          -20,-14},{56,-14},{56,48},{70,48}}, color={255,0,255}));
  connect(current, currentDirectionCorrection.u)
    annotation (Line(points={{0,120},{0,82}}, color={0,0,127}));
  connect(currentDirectionCorrection.y, and1.u1) annotation (Line(points={{0,59},
          {0,30},{12,30},{12,20},{22,20}}, color={255,0,255}));
  connect(currentDirectionCorrection.u1, Direction) annotation (Line(points={{-12,70},{-100,
          70},{-100,-40},{-120,-40}}, color={255,0,255}));
  connect(dutyCycle, greater.u1) annotation (Line(points={{-120,40},{-60,40},{
          -60,-14},{-52,-14}}, color={0,0,127}));
  annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={Rectangle(
            extent={{-100,100},{100,-100}}, lineColor={28,108,200}), Bitmap(
          extent={{-100,-58},{98,60}},
          imageSource="",
          fileName="modelica://BiChopper/../../LaTeX/Abbildungen/diodeEmulationMode.PNG"),
        Text(
          extent={{-94,96},{78,48}},
          textColor={28,108,200},
          textString="%name")}),
      Diagram(coordinateSystem(preserveAspectRatio=false)),
    experiment(
      Interval=2e-06,
      Tolerance=1e-06,
      __Dymola_Algorithm="Radau"));
end DiodeModeGen;
